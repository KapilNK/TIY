/*
  This is the entry point for the Mongopop Express app; it's invoked
  from `Mongopop/bin/www`
*/

var express = require('express');
var path = require('path');
//var favicon = require('serve-favicon');
var logger = require('morgan');
var LOG = require('./services/logger');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var verifyTokenFn = require('./functions/validate-access-token');
var app = express();
var fs = require('fs');
var logDirectory = path.join(__dirname, 'log');
fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)
// The only required route is for the calls to the mongopop API
//var pop = require('./routes/pop');
var login = require('./routes/login');
var password = require('./routes/password');
//var profile = require('./routes/profile');
var register = require('./routes/register');
var logout = require('./routes/logout');
var gallerycontents = require('./routes/gallerycontents');
var imagedetails = require('./routes/imagedetails');
var saveImages = require('./routes/saveimages');
var contactus = require('./routes/contactus');
// Makes the generated html easier to read
app.locals.pretty = true;

// View engine setup. Jade has now been renamed Pug. The view engine generates
// the actual html our Jade/Pug templates. Only the error page is actually
// rendered on the server (Express) side; the rest is generated by the client
// application (e.g. Angular or React).
//app.set('views', path.join(__dirname, 'views'));
//app.set('view engine', 'jade');

// Indicate the middleware that Express should use
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
//app.use(logger('dev'));


app.use(logger('dev', {
  skip: function (req, res) {
      return res.statusCode < 400
  }, stream: process.stderr
}));

app.use(logger('dev', {
  skip: function (req, res) {
      return res.statusCode >= 400
  }, stream: process.stdout
}));

app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// The `public` folder will contain the files that need to be accessed
// by the client app (e.g. Angular .js files).
//app.use(express.static(path.join(__dirname, 'public')));

// Define a single route; to be used to provide the Mongopop Restfull
// API
app.use('/api/login',login);
//app.use('/profile', profile);
app.use('/api/password', password);
app.use('/api/register', register);
app.use('/api/logout', verifyTokenFn.verifyJWT_MW,logout);
app.use('/api/imagedetails', imagedetails);
app.use('/api/gallerycontents',gallerycontents);
app.use('/api/addpost',saveImages);
app.use('/api/contactus', contactus);

// For any other routes, set the status to 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    //res.render('error', {
      //message: err.message,
      //error: err
    //});
    LOG.error(`error in dev reading the file ${err}`, err);
    console.log("err dev",err);
    
    res.send(`${err.message}`);
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  
  res.status(err.status || 500);
 // res.render('error', {
   // message: err.message,
    //error: {}
  //});
LOG.error("error in prod reading the file:%s",`${err.message}`);

});

app.use(function(req, res, next) {
  if (req.secure) {
  next();
  } else {
  res.redirect('https://' + req.headers.host + req.url);
  }
  });
  
module.exports = app;