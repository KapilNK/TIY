#!/usr/bin/env node

/*
  This is the script that must be run to start you Express application. This
  is standard stuff and can mostly be left as-is.
*/

/**
 * Module dependencies.
 */


// Location of the main express application module (`app.js`)
var app = require('../app');

var LOG = require('../services/logger');
var fs = require('fs');
var key = fs.readFileSync('encryption/tiy.key');
var cert = fs.readFileSync( 'encryption/tiy.crt');
var options = {
  key: key,
  cert: cert
};
var https = require('https');
//var ca = fs.readFileSync( 'encryption/intermediate.crt' );



//var config = require('../config.js');

/**
 * Get port from environment and store in Express.
 */
//3002
var port = normalizePort(process.env.PORT || '5443');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//comments these lines on production.
var http = require('http');
http.createServer(app).listen(3002);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      //console.error(bind + ' requires elevated privileges');
      LOG.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
     // console.error(bind + ' is already in use');
     LOG.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    LOG.debug(`Listening on ${bind}`);
  //debug('Listening on ' + bind);
}